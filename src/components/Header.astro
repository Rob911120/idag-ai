---
import { SITE_TITLE } from '../consts';
import ThemeToggle from './ThemeToggle.astro';
import { getCategoryNavigationItems } from '../utils/navigation-fixed.js';
import { getGeoNavigationItems } from '../utils/navigation.js';
import { detectSubdomain } from '../utils/subdomain.js';

// CRITICAL FIX: Check Cloudflare Workers environment variables first (same as index.astro)
const currentUrl = Astro.url.href;
let envGeo = null;
try {
  if (Astro.locals.runtime && Astro.locals.runtime.env && Astro.locals.runtime.env.GEO_SUBDOMAIN) {
    envGeo = Astro.locals.runtime.env.GEO_SUBDOMAIN;
    console.log('üè† CRITICAL FIX: HEADER found environment GEO_SUBDOMAIN:', envGeo);
  }
} catch (e) {
  console.log('üè† ‚ö†Ô∏è HEADER could not access Cloudflare environment variables:', (e as Error).message);
}

const detectedGeoSubdomain = envGeo || detectSubdomain(Astro.request, Astro.url);
const currentGeo = detectedGeoSubdomain || 'se';

console.log('üè† DEBUG: HEADER - Geo Detection:');
console.log('  Current URL:', currentUrl);
console.log('  Environment geo:', envGeo);
console.log('  Detected geo:', detectedGeoSubdomain);
console.log('  Final current geo:', currentGeo);

const NAV_ITEMS = getCategoryNavigationItems(currentGeo, currentUrl);
const GEO_ITEMS = getGeoNavigationItems(currentUrl);

// Use relative path for home URL - works in all environments
const homeUrl = '/';
---

<header class="site-header">
	<div class="container">
		<nav class="site-header__nav">
			<a href={homeUrl} class="site-header__logo">
				{SITE_TITLE}
			</a>
			
			<ul class="site-header__nav-links">
				{NAV_ITEMS.map(item => (
					<li>
						<a
							href={item.href}
							class="site-header__nav-link"
						>
							{item.label}
						</a>
					</li>
				))}
			</ul>
			
			<div class="site-header__actions">
				<div class="search-box">
					<input
						type="search"
						placeholder={currentGeo === 'no' ? 'S√∏k over alle seksjoner...' : 'S√∂k √∂ver alla sektioner...'}
						class="search-box__input"
						id="search-input"
					/>
					<svg class="search-box__icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
						<circle cx="11" cy="11" r="8"></circle>
						<path d="m21 21-4.35-4.35"></path>
					</svg>
				</div>
				
				<!-- Geo Navigation - moved to be left of theme toggle -->
				<div class="geo-navigation">
					{GEO_ITEMS.map(item => (
						<button
							class={`geo-nav-button ${item.geoSubdomain === currentGeo ? 'active' : ''}`}
							title={`V√§xla till ${item.label}`}
							data-geo={item.geoSubdomain}
							data-href={item.href}
						>
							{item.flag}
						</button>
					))}
				</div>
				
				<ThemeToggle />
			</div>
		</nav>
	</div>
</header>

<style>
	.site-header {
		background: var(--bg-primary);
		backdrop-filter: blur(20px);
		border-bottom: 1px solid var(--color-border);
		position: sticky;
		top: 0;
		z-index: 100;
		transition: background var(--transition-normal), border-color var(--transition-normal);
	}

	.site-header__nav {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 1rem 0;
	}

	.site-header__logo {
		font-size: 1.5rem;
		font-weight: 700;
		text-decoration: none;
		color: var(--text-primary);
		transition: color var(--transition-normal);
	}

	.site-header__logo:hover {
		color: var(--color-accent);
	}

	.site-header__nav-links {
		display: flex;
		align-items: center;
		gap: 2rem;
		list-style: none;
		margin: 0;
		padding: 0;
	}

	.site-header__nav-link {
		text-decoration: none;
		color: var(--text-primary);
		font-weight: 500;
		transition: color var(--transition-normal);
		position: relative;
		padding: 0.5rem 0;
		font-size: inherit;
		font-family: inherit;
	}

	.site-header__nav-link:hover {
		color: var(--color-accent);
	}

	.site-header__nav-link.active::after {
		content: '';
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		height: 2px;
		background: var(--color-accent);
		border-radius: 1px;
	}

	.site-header__actions {
		display: flex;
		align-items: center;
		gap: 1.5rem;
	}

	/* Geo Navigation Styles - matching ThemeToggle */
	.geo-navigation {
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.geo-nav-button {
		position: relative;
		width: 44px;
		height: 44px;
		border: none;
		border-radius: 50%;
		background: var(--color-surface);
		color: var(--color-secondary);
		cursor: pointer;
		transition: all var(--transition-fast);
		display: flex;
		align-items: center;
		justify-content: center;
		border: 1px solid var(--color-border);
		font-size: 20px;
		line-height: 1;
	}

	.geo-nav-button:hover {
		background: var(--color-tertiary);
		color: var(--color-primary);
		transform: scale(1.05);
	}

	.geo-nav-button:active {
		transform: scale(0.95);
	}

	.geo-nav-button.active {
		background: var(--color-accent);
		color: white;
		border-color: var(--color-accent);
		box-shadow: 0 2px 8px rgba(0, 113, 227, 0.2);
	}

	.search-box {
		position: relative;
		max-width: 300px;
	}

	.search-box__input {
		width: 100%;
		padding: 0.5rem 1rem 0.5rem 2.5rem;
		border: 1px solid var(--color-border);
		border-radius: 20px;
		font-size: 0.875rem;
		background: var(--tile-background);
		color: var(--text-primary);
		transition: all var(--transition-normal);
	}

	.search-box__input:focus {
		outline: none;
		border-color: var(--color-accent);
		box-shadow: 0 0 0 3px rgba(0, 113, 227, 0.1);
	}

	.search-box__input::placeholder {
		color: var(--text-secondary);
	}

	.search-box__icon {
		position: absolute;
		left: 0.75rem;
		top: 50%;
		transform: translateY(-50%);
		color: var(--text-secondary);
		pointer-events: none;
		transition: color var(--transition-normal);
	}

	/* Mobile Responsive */
	@media (max-width: 768px) {
		.site-header__nav-links {
			display: none;
		}
		
		.site-header__actions {
			gap: 1rem;
		}
		
		.geo-nav-button {
			width: 40px;
			height: 40px;
			font-size: 18px;
		}
		
		.search-box {
			max-width: 200px;
		}
	}

	@media (max-width: 480px) {
		.site-header__nav {
			padding: 0.75rem 0;
		}
		
		.site-header__logo {
			font-size: 1.25rem;
		}
		
		.search-box {
			max-width: 150px;
		}
		
		.search-box__input {
			font-size: 0.8rem;
			padding: 0.4rem 0.8rem 0.4rem 2rem;
		}
		
		.search-box__icon {
			left: 0.6rem;
			width: 14px;
			height: 14px;
		}
	}
</style>

<script>
	// Enhanced search functionality and geo navigation
	document.addEventListener('DOMContentLoaded', () => {
		const searchInput = document.getElementById('search-input') as HTMLInputElement;
		
		// Search functionality
		if (searchInput) {
			searchInput.addEventListener('keypress', (e) => {
				if (e.key === 'Enter') {
					const query = searchInput.value.trim();
					if (query) {
						// Redirect to a global search page with the query
						window.location.href = `/search?q=${encodeURIComponent(query)}`;
					}
				}
			});

			// Optional: Add search button functionality
			searchInput.addEventListener('input', (e) => {
				const query = (e.target as HTMLInputElement).value.trim();
				if (query.length > 2) {
					// Could implement live search suggestions here
					console.log('Searching for:', query);
				}
			});
		}

		// Geo navigation functionality
		const geoButtons = document.querySelectorAll('.geo-nav-button');
		geoButtons.forEach(button => {
			button.addEventListener('click', (e) => {
				e.preventDefault();
				const targetGeo = button.getAttribute('data-geo');
				const targetHref = button.getAttribute('data-href');
				
				if (!targetGeo || !targetHref) {
					console.error('Missing geo data attributes');
					return;
				}
				
				console.log('üåç DEBUG: Geo navigation clicked');
				console.log('  Target geo:', targetGeo);
				console.log('  Target href:', targetHref);
				console.log('  Current hostname:', window.location.hostname);
				console.log('  Current href:', window.location.href);
				
				// FIXED: Always navigate to the correct domain URL, never use geo parameters
				// This ensures proper domain-based language switching
				console.log('üîÑ FIXED: Redirecting to domain URL:', targetHref);
				window.location.href = targetHref;
			});
		});

		// Set active navigation link based on current path
		const navLinks = document.querySelectorAll('.site-header__nav-link');
		const currentPath = window.location.pathname;
		
		navLinks.forEach(link => {
			const href = link.getAttribute('href');
			if (href) {
				// Check if current path matches or starts with the link href
				if (currentPath === href || (href !== '/' && currentPath.startsWith(href + '/'))) {
					link.classList.add('active');
				} else {
					link.classList.remove('active');
				}
			}
		});
	});
</script>
