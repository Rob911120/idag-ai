---
import { SITE_TITLE, SITE_URL } from '../consts';
import { getLanguageFromGeo } from '../utils/subdomain';

export interface Props {
	type?: 'article' | 'website' | 'organization';
	title: string;
	description: string;
	image?: string;
	author?: string;
	publishedTime?: Date;
	updatedTime?: Date;
	geoSubdomain?: string;
	category?: string;
	tags?: string[];
	url?: string;
}

const {
	type = 'website',
	title,
	description,
	image,
	author,
	publishedTime,
	updatedTime,
	geoSubdomain,
	category,
	tags = [],
	url
} = Astro.props;

const language = getLanguageFromGeo(geoSubdomain);
const currentUrl = url || Astro.url.href;
const fullImageUrl = image ? (image.startsWith('http') ? image : new URL(image, SITE_URL).href) : undefined;

// Organization structured data
const organizationData = {
	"@context": "https://schema.org",
	"@type": "Organization",
	"name": SITE_TITLE,
	"url": SITE_URL,
	"logo": {
		"@type": "ImageObject",
		"url": `${SITE_URL}/favicon.svg`
	},
	"sameAs": [
		"https://linkedin.com/company/idag-ai",
		"https://x.com/idagai"
	],
	"description": description,
	"areaServed": geoSubdomain === 'se' ? 'Sweden' : geoSubdomain === 'no' ? 'Norway' : 'Scandinavia',
	"inLanguage": language === 'sv' ? 'sv-SE' : 'nb-NO'
};

// Website structured data
const websiteData = {
	"@context": "https://schema.org",
	"@type": "WebSite",
	"name": SITE_TITLE,
	"url": SITE_URL,
	"description": description,
	"inLanguage": language === 'sv' ? 'sv-SE' : 'nb-NO',
	"publisher": {
		"@type": "Organization",
		"name": SITE_TITLE,
		"url": SITE_URL
	}
};

// Article structured data
const articleData = type === 'article' ? {
	"@context": "https://schema.org",
	"@type": "Article",
	"headline": title,
	"description": description,
	"url": currentUrl,
	"datePublished": publishedTime?.toISOString(),
	"dateModified": (updatedTime || publishedTime)?.toISOString(),
	"author": {
		"@type": "Person",
		"name": author || "idag.ai Redaktion"
	},
	"publisher": {
		"@type": "Organization",
		"name": SITE_TITLE,
		"url": SITE_URL,
		"logo": {
			"@type": "ImageObject",
			"url": `${SITE_URL}/favicon.svg`
		}
	},
	"mainEntityOfPage": {
		"@type": "WebPage",
		"@id": currentUrl
	},
	"image": fullImageUrl ? {
		"@type": "ImageObject",
		"url": fullImageUrl,
		"width": 1200,
		"height": 630
	} : undefined,
	"articleSection": category,
	"keywords": tags.join(', '),
	"inLanguage": language === 'sv' ? 'sv-SE' : 'nb-NO',
	"about": {
		"@type": "Thing",
		"name": "Artificial Intelligence",
		"description": language === 'sv' ? 
			"Artificiell intelligens, AI-teknik och maskininlärning" : 
			"Kunstig intelligens, AI-teknologi og maskinlæring"
	}
} : null;

// Breadcrumb structured data for articles
const breadcrumbData = type === 'article' && category ? {
	"@context": "https://schema.org",
	"@type": "BreadcrumbList",
	"itemListElement": [
		{
			"@type": "ListItem",
			"position": 1,
			"name": "Hem",
			"item": SITE_URL
		},
		{
			"@type": "ListItem",
			"position": 2,
			"name": category && typeof category === 'string' ? category.charAt(0).toUpperCase() + category.slice(1) : 'Category',
			"item": `${SITE_URL}/${category || 'category'}`
		},
		{
			"@type": "ListItem",
			"position": 3,
			"name": title,
			"item": currentUrl
		}
	]
} : null;

const structuredDataItems = [
	organizationData,
	websiteData,
	articleData,
	breadcrumbData
].filter(Boolean);
---

{structuredDataItems.map(data => (
	<script type="application/ld+json" set:html={JSON.stringify(data)} />
))}