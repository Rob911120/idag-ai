---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  class?: string;
  sizes?: string;
  geoSubdomain?: string;
}

const {
  src,
  alt,
  width = 800,
  height = 400,
  loading = 'lazy',
  class: className = '',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  geoSubdomain
} = Astro.props;

// Generate responsive image URLs
function generateResponsiveUrls(baseSrc: string, baseWidth: number) {
  const widths = [320, 640, 768, 1024, 1280, 1600];
  const urls: { width: number; url: string }[] = [];
  
  // If it's an external URL, return as-is
  if (baseSrc.startsWith('http')) {
    return [{ width: baseWidth, url: baseSrc }];
  }
  
  // For local images, generate different sizes
  const extension = baseSrc.split('.').pop();
  const baseName = baseSrc.replace(`.${extension}`, '');
  
  widths.forEach(w => {
    if (w <= baseWidth * 2) { // Don't upscale beyond 2x
      urls.push({
        width: w,
        url: `${baseName}-${w}w.${extension}`
      });
    }
  });
  
  // Always include original
  urls.push({ width: baseWidth, url: baseSrc });
  
  return urls.sort((a, b) => a.width - b.width);
}

const responsiveUrls = generateResponsiveUrls(src, width);
const srcset = responsiveUrls.map(({ width: w, url }) => `${url} ${w}w`).join(', ');

// Generate WebP alternatives for better compression
const webpSrcset = responsiveUrls
  .map(({ width: w, url }) => {
    if (url.startsWith('http')) return null;
    const webpUrl = url.replace(/\.(jpg|jpeg|png)$/i, '.webp');
    return `${webpUrl} ${w}w`;
  })
  .filter(Boolean)
  .join(', ');

// Add geo-specific alt text enhancement
const enhancedAlt = geoSubdomain ? 
  `${alt} - ${geoSubdomain === 'se' ? 'Sverige' : 'Norge'}` : 
  alt;
---

<picture class={className}>
  {webpSrcset && (
    <source 
      srcset={webpSrcset}
      sizes={sizes}
      type="image/webp"
    />
  )}
  <img
    src={src}
    srcset={srcset}
    sizes={sizes}
    alt={enhancedAlt}
    width={width}
    height={height}
    loading={loading}
    decoding="async"
    style="aspect-ratio: auto; max-width: 100%; height: auto;"
  />
</picture>

<style>
  picture {
    display: block;
  }
  
  img {
    border-radius: 8px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    transition: transform 0.2s ease-in-out;
  }
  
  img:hover {
    transform: scale(1.02);
  }
  
  /* Optimize for different screen sizes */
  @media (max-width: 768px) {
    img {
      border-radius: 4px;
    }
  }
  
  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    img {
      filter: brightness(0.9);
    }
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    img {
      filter: contrast(1.2);
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    img {
      transition: none;
    }
    
    img:hover {
      transform: none;
    }
  }
</style>