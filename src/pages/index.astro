---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import HeroArticle from '../components/news/HeroArticle.astro';
import NewsGrid from '../components/news/NewsGrid.astro';
import NotificationBanner from '../components/NotificationBanner.astro';
import { SITE_TITLE, SITE_DESCRIPTION, HASHTAG_CATEGORIES } from '../consts';
import { getCollection } from 'astro:content';
import { detectSubdomain, getGeoContent, getCountryCollections } from '../utils/subdomain.js';
import { getCurrentGeoSubdomain } from '../utils/navigation.js';
import { getHtmlLang, tGeo } from '../utils/i18n.js';

// DEBUG: Log request details for geo subdomain detection
console.log('🏠 INDEX PAGE - Request Analysis:');
console.log('  Request URL:', Astro.request.url);
console.log('  Astro URL:', Astro.url.href);
console.log('  Pathname:', Astro.url.pathname);

// Detect geo subdomain from request
const detectedGeoSubdomain = detectSubdomain(Astro.request);
console.log('🎯 Detected geo subdomain:', detectedGeoSubdomain);

// Get current geo subdomain (fallback to 'se' if none detected)
const currentGeo = detectedGeoSubdomain || getCurrentGeoSubdomain(Astro.request.url) || 'se';
console.log('🌍 Current geo:', currentGeo);

// Get country-specific collections
const seNyhetarContent = await getCollection('se-nyheter').catch(() => []);
const seModellerContent = await getCollection('se-modeller').catch(() => []);
const seVerktygContent = await getCollection('se-verktyg').catch(() => []);
const seAkademiContent = await getCollection('se-akademi').catch(() => []);

const noNyhetarContent = await getCollection('no-nyheter').catch(() => []);
const noModellerContent = await getCollection('no-modeller').catch(() => []);
const noVerktygContent = await getCollection('no-verktyg').catch(() => []);
const noAkademiContent = await getCollection('no-akademi').catch(() => []);

// Prepare collections object
const collections = {
  'se-nyheter': seNyhetarContent,
  'se-modeller': seModellerContent,
  'se-verktyg': seVerktygContent,
  'se-akademi': seAkademiContent,
  'no-nyheter': noNyhetarContent,
  'no-modeller': noModellerContent,
  'no-verktyg': noVerktygContent,
  'no-akademi': noAkademiContent
};

// Get geo-specific content
const countryCollections = getCountryCollections(currentGeo, collections);

let allContent: any[];
if (currentGeo) {
  console.log('🎯 Filtering content for geo:', currentGeo);
  // Combine all content for the current geo
  allContent = [
    ...countryCollections.nyheter.map((item: any) => ({ ...item, subdomain: 'nyheter', geoSubdomain: currentGeo })),
    ...countryCollections.modeller.map((item: any) => ({ ...item, subdomain: 'modeller', geoSubdomain: currentGeo })),
    ...countryCollections.verktyg.map((item: any) => ({ ...item, subdomain: 'verktyg', geoSubdomain: currentGeo })),
    ...countryCollections.akademi.map((item: any) => ({ ...item, subdomain: 'akademi', geoSubdomain: currentGeo }))
  ];
  console.log(`📊 Found ${allContent.length} articles for ${currentGeo}`);
} else {
  console.log('🌐 Showing all content (no geo detected - defaulting to Swedish)');
  // Fallback to Swedish content when no geo is detected
  const fallbackCollections = getCountryCollections('se', collections);
  allContent = [
    ...fallbackCollections.nyheter.map((item: any) => ({ ...item, subdomain: 'nyheter', geoSubdomain: 'se' })),
    ...fallbackCollections.modeller.map((item: any) => ({ ...item, subdomain: 'modeller', geoSubdomain: 'se' })),
    ...fallbackCollections.verktyg.map((item: any) => ({ ...item, subdomain: 'verktyg', geoSubdomain: 'se' })),
    ...fallbackCollections.akademi.map((item: any) => ({ ...item, subdomain: 'akademi', geoSubdomain: 'se' }))
  ];
}

const sortedContent = allContent.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Get hero article (most recent featured article or first article)
const featuredArticle = sortedContent.find(article => article.data.featured) || sortedContent[0];

// Get latest articles for grid (excluding hero)
const latestArticles = sortedContent
  .filter(article => article.id !== featuredArticle?.id)
  .slice(0, 8)
  .map(article => ({
    title: article.data.title,
    description: article.data.description,
    heroImage: article.data.heroImage,
    heroImageAlt: article.data.heroImageAlt,
    pubDate: article.data.pubDate,
    slug: article.id,
    readingTime: article.data.readingTime,
    hashtags: article.data.hashtags || [],
    subdomain: article.subdomain,
  }));

// Extract popular hashtags from all content
const allHashtags = allContent.flatMap(article => article.data.hashtags || []);
const hashtagCounts = allHashtags.reduce((acc, tag) => {
  acc[tag] = (acc[tag] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

const popularHashtags = Object.entries(hashtagCounts)
  .sort(([,a], [,b]) => (b as number) - (a as number))
  .slice(0, 15)
  .map(([tag]) => tag);

// Prepare hero article data
const heroArticleData = featuredArticle ? {
  title: featuredArticle.data.title,
  description: featuredArticle.data.description,
  heroImage: featuredArticle.data.heroImage,
  heroImageAlt: featuredArticle.data.heroImageAlt,
  pubDate: featuredArticle.data.pubDate,
  slug: featuredArticle.id,
  readingTime: featuredArticle.data.readingTime,
  author: featuredArticle.data.author,
  hashtags: featuredArticle.data.hashtags || [],
  subdomain: featuredArticle.subdomain,
} : null;

// Category navigation for current geo
const categories = [
  {
    name: tGeo('category.nyheter', currentGeo),
    description: tGeo('nav.news', currentGeo),
    href: '/nyheter',
    icon: 'news',
    count: countryCollections.nyheter.length
  },
  {
    name: tGeo('category.modeller', currentGeo),
    description: tGeo('nav.models', currentGeo),
    href: '/modeller',
    icon: 'models',
    count: countryCollections.modeller.length
  },
  {
    name: tGeo('category.verktyg', currentGeo),
    description: tGeo('nav.tools', currentGeo),
    href: '/verktyg',
    icon: 'tools',
    count: countryCollections.verktyg.length
  },
  {
    name: tGeo('category.akademi', currentGeo),
    description: tGeo('nav.academy', currentGeo),
    href: '/akademi',
    icon: 'education',
    count: countryCollections.akademi.length
  }
];

// Get HTML language attribute
const htmlLang = getHtmlLang(currentGeo);
---

<!doctype html>
<html lang={htmlLang}>
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<link rel="stylesheet" href="/src/styles/apple-newsroom.css" />
	</head>
	<body>
		<Header />
		
		<main class="main-content">
			<!-- Hero Section -->
			{heroArticleData && (
				<section class="hero-section section--hero section--full-width scroll-animate">
					<div class="container">
						<div class="hero-intro scroll-animate">
							<h1 class="hero-intro__title typography-hero">{tGeo('nav.news', currentGeo)}</h1>
							<p class="hero-intro__subtitle typography-body">
								{currentGeo === 'no'
									? 'Hold deg oppdatert med de siste nyhetene innen kunstig intelligens'
									: 'Håll dig uppdaterad med de senaste nyheterna inom artificiell intelligens'
								}
							</p>
						</div>
						<HeroArticle article={heroArticleData} />
					</div>
				</section>
			)}

			<!-- Latest News Grid -->
			{latestArticles.length > 0 && (
				<section class="news-section section section--full-width scroll-animate">
					<div id="news-grid-container">
						<NewsGrid
							articles={latestArticles}
							title={currentGeo === 'no' ? 'Siste artiklene' : 'Senaste artiklarna'}
							columns="two"
						/>
					</div>
				</section>
			)}

			<!-- Subdomain Navigation -->
			<section class="subdomains-section section scroll-animate">
				<div class="container">
					<h2 class="subdomains-section__title typography-headline text-center">
						{currentGeo === 'no' ? 'Utforsk våre områder' : 'Utforska våra områden'}
					</h2>
					<div class="subdomains-grid">
						{categories.map(category => (
							<a href={category.href} class="subdomain-card">
								<div class="subdomain-card__icon">
									{category.icon === 'news' && (
										<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<path d="M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-2 2Zm0 0a2 2 0 0 1-2-2v-9c0-1.1.9-2 2-2h2"/>
											<path d="M18 14h-8"/>
											<path d="M15 18h-5"/>
											<path d="M10 6h8v4h-8V6Z"/>
										</svg>
									)}
									{category.icon === 'models' && (
										<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-1.36c0-1.1.9-2 2-2h1.5V4.5A2.5 2.5 0 0 1 9.5 2Z"/>
											<path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-1.36c0-1.1-.9-2-2-2h-1.5V4.5A2.5 2.5 0 0 0 14.5 2Z"/>
										</svg>
									)}
									{category.icon === 'tools' && (
										<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/>
										</svg>
									)}
									{category.icon === 'education' && (
										<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<path d="M22 10v6M2 10l10-5 10 5-10 5z"/>
											<path d="M6 12v5c3 3 9 3 12 0v-5"/>
										</svg>
									)}
								</div>
								<div class="subdomain-card__content">
									<h3 class="subdomain-card__title typography-title">{category.name}</h3>
									<p class="subdomain-card__description typography-body">
										{category.description}
									</p>
									<div class="subdomain-card__count">
										{category.count} {currentGeo === 'no' ? 'artikler' : 'artiklar'}
									</div>
								</div>
							</a>
						))}
					</div>
				</div>
			</section>

			<!-- Popular Hashtags -->
			{popularHashtags.length > 0 && (
				<section class="hashtags-section section scroll-animate">
					<div class="container">
						<h2 class="hashtags-section__title typography-headline text-center">
							{currentGeo === 'no' ? 'Populære emner' : 'Populära ämnen'}
						</h2>
						<div class="hashtags-cloud">
							{popularHashtags.map(hashtag => (
								<a href={`/tagg/${hashtag}`} class="hashtag-badge hashtag-badge--${hashtag}">
									#{hashtag}
								</a>
							))}
						</div>
					</div>
				</section>
			)}

			<!-- Categories Preview -->
			<section class="categories-section section section--full-width scroll-animate">
				<div class="container">
					<h2 class="categories-section__title typography-headline text-center scroll-animate">
						{currentGeo === 'no' ? 'Utforsk våre kategorier' : 'Utforska våra kategorier'}
					</h2>
					<div class="categories-grid">
						{Object.entries(HASHTAG_CATEGORIES).map(([key, category]) => (
							<a href={`/?filter=${key}`} class="category-card">
								<div class="category-card__icon">
									{key === 'modeller' && (
										<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-1.36c0-1.1.9-2 2-2h1.5V4.5A2.5 2.5 0 0 1 9.5 2Z"/>
											<path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-1.36c0-1.1-.9-2-2-2h-1.5V4.5A2.5 2.5 0 0 0 14.5 2Z"/>
										</svg>
									)}
									{key === 'verktyg' && (
										<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/>
										</svg>
									)}
									{key === 'guider' && (
										<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20"/>
										</svg>
									)}
									{key === 'nyheter' && (
										<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<path d="M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-2 2Zm0 0a2 2 0 0 1-2-2v-9c0-1.1.9-2 2-2h2"/>
											<path d="M18 14h-8"/>
											<path d="M15 18h-5"/>
											<path d="M10 6h8v4h-8V6Z"/>
										</svg>
									)}
									{key === 'analys' && (
										<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<line x1="18" y1="20" x2="18" y2="10"/>
											<line x1="12" y1="20" x2="12" y2="4"/>
											<line x1="6" y1="20" x2="6" y2="14"/>
										</svg>
									)}
									{key === 'trender' && (
										<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<polyline points="22,12 18,12 15,21 9,3 6,12 2,12"/>
										</svg>
									)}
									{key === 'företag' && (
										<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
											<path d="M3 21h18"/>
											<path d="M5 21V7l8-4v18"/>
											<path d="M19 21V11l-6-4"/>
										</svg>
									)}
								</div>
								<h3 class="category-card__title typography-title">{category.name}</h3>
								<p class="category-card__description typography-body">
									{category.description}
								</p>
							</a>
						))}
					</div>
				</div>
			</section>

		</main>
		
		<Footer />
		
		<!-- Apple-style Notification Banner -->
		<NotificationBanner />

		<!-- Enhanced Scripts with Animations -->
		<script>
			import { initScrollAnimations, initProgressiveImages } from '../utils.js';
			
			document.addEventListener('DOMContentLoaded', () => {
				// Initialize scroll animations and progressive loading
				initScrollAnimations();
				initProgressiveImages();
			});
		</script>
		
		<!-- Filtering Script -->
		<script define:vars={{ latestArticles, heroArticleData }}>
			document.addEventListener('DOMContentLoaded', () => {
				const allArticles = [...latestArticles];
				if (heroArticleData) {
					allArticles.unshift(heroArticleData);
				}

				// Listen for filter events from header
				window.addEventListener('filter', (event) => {
					const filter = event.detail.filter;
					filterArticles(filter);
				});

				// Listen for search events from header
				window.addEventListener('search', (event) => {
					const query = event.detail.query;
					searchArticles(query);
				});

				function filterArticles(filter) {
					const newsGrid = document.getElementById('news-grid-container');
					const heroSection = document.querySelector('.hero-section');
					
					if (filter === 'senaste') {
						// Show all articles
						showAllArticles();
					} else {
						// Filter articles by hashtag
						const filteredArticles = allArticles.filter(article =>
							article.hashtags && article.hashtags.includes(filter)
						);
						updateNewsDisplay(filteredArticles, `Artiklar: ${filter}`);
					}
				}

				function searchArticles(query) {
					const filteredArticles = allArticles.filter(article =>
						article.title.toLowerCase().includes(query.toLowerCase()) ||
						article.description.toLowerCase().includes(query.toLowerCase())
					);
					updateNewsDisplay(filteredArticles, `Sökresultat för: "${query}"`);
				}

				function showAllArticles() {
					const heroSection = document.querySelector('.hero-section');
					const newsGrid = document.getElementById('news-grid-container');
					
					if (heroSection) heroSection.style.display = 'block';
					if (newsGrid) {
						newsGrid.innerHTML = `
							<section class="section">
								<div class="container">
									<h2 class="section-title typography-headline text-center">Senaste artiklarna</h2>
									<div class="news-grid news-grid--two-columns">
										${latestArticles.map(article => createArticleCard(article)).join('')}
									</div>
								</div>
							</section>
						`;
					}
				}

				function updateNewsDisplay(articles, title) {
					const heroSection = document.querySelector('.hero-section');
					const newsGrid = document.getElementById('news-grid-container');
					
					// Hide hero section when filtering
					if (heroSection) heroSection.style.display = 'none';
					
					if (newsGrid) {
						newsGrid.innerHTML = `
							<section class="section">
								<div class="container">
									<h2 class="section-title typography-headline text-center">${title}</h2>
									<div class="news-grid news-grid--two-columns">
										${articles.map(article => createArticleCard(article)).join('')}
									</div>
								</div>
							</section>
						`;
					}
				}

				function createArticleCard(article) {
					const hashtagsHtml = article.hashtags.slice(0, 2).map(hashtag =>
						`<a href="/?filter=${hashtag}" class="hashtag-badge hashtag-badge--${hashtag} hashtag-badge--small">#${hashtag}</a>`
					).join('');
					
					return `
						<article class="news-card">
							<div class="news-card__image-container">
								<a href="/artikel/${article.slug}" aria-label="Läs artikel: ${article.title}">
									<img src="${article.heroImage}" alt="${article.heroImageAlt}" width="400" height="225" class="news-card__image" loading="lazy" decoding="async" />
								</a>
							</div>
							
							<div class="news-card__content">
								<div class="news-card__hashtags">
									${hashtagsHtml}
								</div>
								
								<h2 class="news-card__title typography-title">
									<a href="/artikel/${article.slug}" class="news-card__link">
										${article.title}
									</a>
								</h2>
								
								<p class="news-card__description typography-body">
									${article.description}
								</p>
								
								<div class="news-card__meta">
									<time class="news-card__date typography-small">${new Date(article.pubDate).toLocaleDateString('sv-SE')}</time>
									${article.readingTime ? `<span class="news-card__reading-time typography-small">${article.readingTime} min läsning</span>` : ''}
								</div>
							</div>
						</article>
					`;
				}
			});
		</script>
	</body>
</html>

<style>
	/* Main Content Container */
	.main-content {
		width: 100%;
		min-height: 100vh;
		display: flex;
		flex-direction: column;
	}

	/* Hero Section */
	.hero-section {
		background-color: var(--bg-primary);
		width: 100%;
		position: relative;
	}

	.hero-intro {
		text-align: center;
		margin-bottom: var(--spacing-2xl, 4rem);
	}

	.hero-intro__title {
		margin: 0 0 var(--spacing-md, 1.5rem) 0;
		color: var(--text-primary);
	}

	.hero-intro__subtitle {
		margin: 0;
		color: var(--text-secondary);
		font-size: 1.125rem;
		max-width: 600px;
		margin-left: auto;
		margin-right: auto;
	}

	/* News Section */
	.news-section {
		background-color: var(--bg-primary);
		width: 100%;
		position: relative;
	}

	/* Categories Section */
	.categories-section {
		background-color: var(--bg-primary);
		width: 100%;
		position: relative;
	}

	.categories-section__title {
		margin: 0 0 var(--spacing-2xl, 4rem) 0;
		color: var(--text-primary);
	}

	.categories-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
		gap: var(--spacing-lg, 2rem);
	}

	.category-card {
		display: flex;
		flex-direction: column;
		align-items: center;
		text-align: center;
		padding: var(--spacing-xl, 3rem) var(--spacing-lg, 2rem);
		background: var(--tile-background);
		border-radius: var(--border-radius, 12px);
		border: 1px solid var(--color-border);
		text-decoration: none;
		color: inherit;
		transition: all var(--transition-normal, 0.3s ease);
		box-shadow: var(--shadow-sm, 0 1px 3px rgba(0, 0, 0, 0.1));
	}

	.category-card:hover {
		transform: translateY(-4px);
		box-shadow: var(--shadow-hover, 0 8px 25px rgba(0, 0, 0, 0.15));
	}

	.category-card__icon {
		margin-bottom: var(--spacing-md, 1.5rem);
		color: var(--color-accent);
	}

	.category-card__title {
		margin: 0 0 var(--spacing-sm, 1rem) 0;
		color: var(--text-primary);
	}

	.category-card__description {
		margin: 0;
		color: var(--text-secondary);
	}

	/* Subdomains Section */
	.subdomains-section {
		background-color: var(--bg-secondary);
		width: 100%;
	}

	.subdomains-section__title {
		margin: 0 0 var(--spacing-2xl, 4rem) 0;
		color: var(--text-primary);
	}

	.subdomains-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
		gap: var(--spacing-lg, 2rem);
	}

	.subdomain-card {
		display: flex;
		align-items: center;
		gap: var(--spacing-lg, 2rem);
		padding: var(--spacing-xl, 3rem);
		background: var(--tile-background);
		border-radius: var(--border-radius, 12px);
		border: 1px solid var(--color-border);
		text-decoration: none;
		color: inherit;
		transition: all var(--transition-normal);
		box-shadow: var(--shadow-sm);
	}

	.subdomain-card:hover {
		transform: translateY(-4px);
		box-shadow: var(--shadow-hover);
	}

	.subdomain-card__icon {
		color: var(--color-accent);
		flex-shrink: 0;
	}

	.subdomain-card__content {
		flex: 1;
	}

	.subdomain-card__title {
		margin: 0 0 var(--spacing-xs, 0.5rem) 0;
		color: var(--text-primary);
	}

	.subdomain-card__description {
		margin: 0 0 var(--spacing-xs, 0.5rem) 0;
		color: var(--text-secondary);
	}

	.subdomain-card__count {
		font-size: 0.875rem;
		color: var(--color-accent);
		font-weight: 600;
	}

	/* Hashtags Section */
	.hashtags-section {
		background-color: var(--bg-primary);
		width: 100%;
	}

	.hashtags-section__title {
		margin: 0 0 var(--spacing-xl, 3rem) 0;
		color: var(--text-primary);
	}

	.hashtags-cloud {
		display: flex;
		flex-wrap: wrap;
		gap: var(--spacing-sm, 1rem);
		justify-content: center;
		align-items: center;
	}

	.hashtag-badge {
		display: inline-block;
		padding: 0.25rem 0.75rem;
		background: var(--color-accent);
		color: white;
		text-decoration: none;
		border-radius: 1rem;
		font-size: 0.875rem;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.025em;
		transition: all var(--transition-normal);
		white-space: nowrap;
	}

	.hashtag-badge:hover {
		background: var(--color-accent-hover);
		transform: translateY(-1px);
	}

	/* Different colors for different hashtags */
	.hashtag-badge--modeller {
		background: #8b5cf6;
	}
	
	.hashtag-badge--modeller:hover {
		background: #7c3aed;
	}

	.hashtag-badge--verktyg {
		background: #10b981;
	}
	
	.hashtag-badge--verktyg:hover {
		background: #059669;
	}

	.hashtag-badge--guider {
		background: #f59e0b;
	}
	
	.hashtag-badge--guider:hover {
		background: #d97706;
	}

	.hashtag-badge--nyheter {
		background: #ef4444;
	}
	
	.hashtag-badge--nyheter:hover {
		background: #dc2626;
	}

	.hashtag-badge--analys {
		background: #3b82f6;
	}
	
	.hashtag-badge--analys:hover {
		background: #2563eb;
	}

	.hashtag-badge--trender {
		background: #ec4899;
	}
	
	.hashtag-badge--trender:hover {
		background: #db2777;
	}

	.hashtag-badge--företag {
		background: #6366f1;
	}
	
	.hashtag-badge--företag:hover {
		background: #4f46e5;
	}

	/* Enhanced Mobile Responsive */
	@media (max-width: 480px) {
		.hero-intro {
			margin-bottom: var(--spacing-lg, 2rem);
			padding: 0 var(--spacing-xs, 0.5rem);
		}

		.hero-intro__subtitle {
			font-size: 1rem;
			padding: 0 var(--spacing-sm, 1rem);
		}

		.subdomains-grid {
			grid-template-columns: 1fr;
			gap: var(--spacing-md, 1.5rem);
		}

		.subdomain-card {
			flex-direction: column;
			text-align: center;
			gap: var(--spacing-md, 1.5rem);
			padding: var(--spacing-lg, 2rem);
			margin: 0 var(--spacing-xs, 0.5rem);
		}

		.hashtags-cloud {
			gap: var(--spacing-xs, 0.5rem);
		}

		.categories-grid {
			grid-template-columns: 1fr;
			gap: var(--spacing-sm, 1rem);
		}

		.category-card {
			padding: var(--spacing-lg, 2rem) var(--spacing-sm, 1rem);
			margin: 0 var(--spacing-xs, 0.5rem);
		}

		.categories-section__title,
		.subdomains-section__title,
		.hashtags-section__title {
			margin-bottom: var(--spacing-lg, 2rem);
			padding: 0 var(--spacing-sm, 1rem);
		}
	}

	@media (min-width: 481px) and (max-width: 768px) {
		.categories-grid {
			grid-template-columns: repeat(2, 1fr);
			gap: var(--spacing-md, 1.5rem);
		}

	}

	@media (min-width: 769px) and (max-width: 1024px) {
		.categories-grid {
			grid-template-columns: repeat(3, 1fr);
		}
	}

	@media (min-width: 1025px) {
		.categories-grid {
			grid-template-columns: repeat(5, 1fr);
			gap: var(--spacing-xl, 3rem);
		}

		.category-card {
			padding: var(--spacing-2xl, 4rem) var(--spacing-lg, 2rem);
		}
	}

	/* News Card Styles for JavaScript-generated cards */
	.news-card {
		display: flex;
		flex-direction: column;
		background: var(--color-background);
		border-radius: var(--border-radius);
		overflow: hidden;
		transition: transform var(--transition-normal), box-shadow var(--transition-normal), background var(--transition-normal), border-color var(--transition-normal);
		border: 1px solid var(--color-border);
		height: 100%;
	}

	.news-card:hover {
		transform: translateY(-4px);
		box-shadow: var(--shadow-hover);
	}

	.news-card__image-container {
		position: relative;
		overflow: hidden;
		aspect-ratio: 16/9;
	}

	.news-card__image-container a {
		display: block;
		width: 100%;
		height: 100%;
	}

	.news-card__image {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform var(--transition-normal);
	}

	.news-card:hover .news-card__image {
		transform: scale(1.05);
	}

	.news-card__content {
		padding: var(--spacing-md);
		display: flex;
		flex-direction: column;
		gap: var(--spacing-sm);
		flex: 1;
	}

	.news-card__title {
		flex: 1;
		margin: 0;
	}

	.news-card__link {
		text-decoration: none;
		color: inherit;
		transition: color var(--transition-normal);
	}

	.news-card__link:hover {
		color: var(--color-accent);
	}

	.news-card__description {
		color: var(--color-secondary);
		display: -webkit-box;
		-webkit-line-clamp: 3;
		-webkit-box-orient: vertical;
		overflow: hidden;
		margin: 0;
	}

	.news-card__meta {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-top: auto;
		padding-top: var(--spacing-sm);
		color: var(--color-secondary);
	}

	.news-card__reading-time {
		color: var(--color-secondary);
	}

	.category-badge--small {
		font-size: 0.75rem;
		padding: 0.25rem 0.5rem;
	}

	/* Mobile adjustments for news cards */
	@media (max-width: 480px) {
		.news-card__content {
			padding: var(--spacing-sm);
		}
		
		.news-card__meta {
			flex-direction: column;
			align-items: flex-start;
			gap: 0.25rem;
		}
	}

	/* Hashtag badge styles for JavaScript-generated cards */
	.hashtag-badge {
		display: inline-block;
		padding: 0.25rem 0.75rem;
		background: var(--color-accent);
		color: white;
		text-decoration: none;
		border-radius: 1rem;
		font-size: 0.875rem;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.025em;
		transition: all var(--transition-normal);
		white-space: nowrap;
	}

	.hashtag-badge:hover {
		background: var(--color-accent-hover, #005bb5);
		transform: translateY(-1px);
	}

	.hashtag-badge--small {
		font-size: 0.75rem;
		padding: 0.2rem 0.6rem;
	}

	/* Different colors for different hashtags */
	.hashtag-badge--modeller {
		background: #8b5cf6;
	}
	
	.hashtag-badge--modeller:hover {
		background: #7c3aed;
	}

	.hashtag-badge--verktyg {
		background: #10b981;
	}
	
	.hashtag-badge--verktyg:hover {
		background: #059669;
	}

	.hashtag-badge--guider {
		background: #f59e0b;
	}
	
	.hashtag-badge--guider:hover {
		background: #d97706;
	}

	.hashtag-badge--nyheter {
		background: #ef4444;
	}
	
	.hashtag-badge--nyheter:hover {
		background: #dc2626;
	}

	.hashtag-badge--analys {
		background: #3b82f6;
	}
	
	.hashtag-badge--analys:hover {
		background: #2563eb;
	}

	.hashtag-badge--trender {
		background: #ec4899;
	}
	
	.hashtag-badge--trender:hover {
		background: #db2777;
	}

	.hashtag-badge--företag {
		background: #6366f1;
	}
	
	.hashtag-badge--företag:hover {
		background: #4f46e5;
	}
</style>
